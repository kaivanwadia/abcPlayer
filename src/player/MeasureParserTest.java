package player;
import static org.junit.Assert.*;

import org.junit.Test;
import sound.Chord;
import sound.Measure;
import sound.Note;
import sound.Pair;
import sound.PlayableElement;
import sound.Type;
import java.util.ArrayList;

public class MeasureParserTest {
    ArrayList<ABCLexer.Token> tokens;
    ABCLexer.Token token;
    Parser parser = new Parser();
    
    @Test
    public void basicMeasureTest() {
        tokens = new ArrayList<ABCLexer.Token>();
        token = new ABCLexer.Token(Type.NOTE, "C");
        tokens.add(token);
        token = new ABCLexer.Token(Type.LENGTH, "3/4");
        tokens.add(token);
        token = new ABCLexer.Token(Type.START_CHORD, "[");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "c");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "e");
        tokens.add(token);
        token = new ABCLexer.Token(Type.END_CHORD, "]");
        tokens.add(token);
        token = new ABCLexer.Token(Type.BAR, "|");
        tokens.add(token);
        ArrayList<PlayableElement> elems = new ArrayList<PlayableElement>();
        Note note = new Note('C', 3, 4);
        elems.add(note);
        Chord chord = new Chord(new Note('c'));
        chord = chord.addNote(new Note('e'));
        elems.add(chord);
        Measure measure = new Measure(elems, true, false, false, false, false);
        Pair<Measure, Integer> ans = new Pair<Measure, Integer>(measure, 7);
        Pair<Measure, Integer> result = parser.measureParser(tokens, 0, null);
        assertEquals(ans.getVal1().toString(), result.getVal1().toString());
        assertEquals(ans.getVal1().isFirstRepeat, result.getVal1().isFirstRepeat);
        assertEquals(ans.getVal1().isMajorEnd, result.getVal1().isMajorEnd);
        assertEquals(ans.getVal1().isMajorStart, result.getVal1().isMajorStart);
        assertEquals(ans.getVal1().isRepeatEnd, result.getVal1().isRepeatEnd);
        assertEquals(ans.getVal1().isSecondRepeat, result.getVal1().isSecondRepeat);
        assertEquals(ans.getVal2(), result.getVal2());
    }
    
    @Test
    public void majorEndTest() {
        tokens = new ArrayList<ABCLexer.Token>();
        token = new ABCLexer.Token(Type.NOTE, "C");
        tokens.add(token);
        token = new ABCLexer.Token(Type.LENGTH, "3/4");
        tokens.add(token);
        token = new ABCLexer.Token(Type.START_CHORD, "[");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "c");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "e");
        tokens.add(token);
        token = new ABCLexer.Token(Type.END_CHORD, "]");
        tokens.add(token);
        token = new ABCLexer.Token(Type.START_REPEAT, "|]");
        tokens.add(token);
        ArrayList<PlayableElement> elems = new ArrayList<PlayableElement>();
        Note note = new Note('C', 3, 4);
        elems.add(note);
        Chord chord = new Chord(new Note('c'));
        chord = chord.addNote(new Note('e'));
        elems.add(chord);
        Measure measure = new Measure(elems, true, true, false, false, false);
        Pair<Measure, Integer> ans = new Pair<Measure, Integer>(measure, 7);
        Pair<Measure, Integer> result = parser.measureParser(tokens, 0, null);
        assertEquals(ans.getVal1().toString(), result.getVal1().toString());
        assertEquals(ans.getVal1().isFirstRepeat, result.getVal1().isFirstRepeat);
        assertEquals(ans.getVal1().isMajorEnd, result.getVal1().isMajorEnd);
        assertEquals(ans.getVal1().isMajorStart, result.getVal1().isMajorStart);
        assertEquals(ans.getVal1().isRepeatEnd, result.getVal1().isRepeatEnd);
        assertEquals(ans.getVal1().isSecondRepeat, result.getVal1().isSecondRepeat);
        assertEquals(ans.getVal2(), result.getVal2());
        
        tokens = new ArrayList<ABCLexer.Token>();
        token = new ABCLexer.Token(Type.NOTE, "C");
        tokens.add(token);
        token = new ABCLexer.Token(Type.LENGTH, "3/4");
        tokens.add(token);
        token = new ABCLexer.Token(Type.START_CHORD, "[");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "c");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "e");
        tokens.add(token);
        token = new ABCLexer.Token(Type.END_CHORD, "]");
        tokens.add(token);
        token = new ABCLexer.Token(Type.START_REPEAT, "|:");
        tokens.add(token);
        elems = new ArrayList<PlayableElement>();
        note = new Note('C', 3, 4);
        elems.add(note);
        chord = new Chord(new Note('c'));
        chord = chord.addNote(new Note('e'));
        elems.add(chord);
        measure = new Measure(elems, true, true, false, false, false);
        ans = new Pair<Measure, Integer>(measure, 7);
        result = parser.measureParser(tokens, 0, null);
        assertEquals(ans.getVal1().toString(), result.getVal1().toString());
        assertEquals(ans.getVal1().isFirstRepeat, result.getVal1().isFirstRepeat);
        assertEquals(ans.getVal1().isMajorEnd, result.getVal1().isMajorEnd);
        assertEquals(ans.getVal1().isMajorStart, result.getVal1().isMajorStart);
        assertEquals(ans.getVal1().isRepeatEnd, result.getVal1().isRepeatEnd);
        assertEquals(ans.getVal1().isSecondRepeat, result.getVal1().isSecondRepeat);
        assertEquals(ans.getVal2(), result.getVal2());
        
        tokens = new ArrayList<ABCLexer.Token>();
        token = new ABCLexer.Token(Type.NOTE, "C");
        tokens.add(token);
        token = new ABCLexer.Token(Type.LENGTH, "3/4");
        tokens.add(token);
        token = new ABCLexer.Token(Type.START_CHORD, "[");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "c");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "e");
        tokens.add(token);
        token = new ABCLexer.Token(Type.END_CHORD, "]");
        tokens.add(token);
        token = new ABCLexer.Token(Type.START_REPEAT, "||");
        tokens.add(token);
        elems = new ArrayList<PlayableElement>();
        note = new Note('C', 3, 4);
        elems.add(note);
        chord = new Chord(new Note('c'));
        chord = chord.addNote(new Note('e'));
        elems.add(chord);
        measure = new Measure(elems, true, true, false, false, false);
        ans = new Pair<Measure, Integer>(measure, 7);
        result = parser.measureParser(tokens, 0, null);
        assertEquals(ans.getVal1().toString(), result.getVal1().toString());
        assertEquals(ans.getVal1().isFirstRepeat, result.getVal1().isFirstRepeat);
        assertEquals(ans.getVal1().isMajorEnd, result.getVal1().isMajorEnd);
        assertEquals(ans.getVal1().isMajorStart, result.getVal1().isMajorStart);
        assertEquals(ans.getVal1().isRepeatEnd, result.getVal1().isRepeatEnd);
        assertEquals(ans.getVal1().isSecondRepeat, result.getVal1().isSecondRepeat);
        assertEquals(ans.getVal2(), result.getVal2());
        
        tokens = new ArrayList<ABCLexer.Token>();
        token = new ABCLexer.Token(Type.NOTE, "C");
        tokens.add(token);
        token = new ABCLexer.Token(Type.LENGTH, "3/4");
        tokens.add(token);
        token = new ABCLexer.Token(Type.START_CHORD, "[");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "c");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "e");
        tokens.add(token);
        token = new ABCLexer.Token(Type.END_CHORD, "]");
        tokens.add(token);
        token = new ABCLexer.Token(Type.START_REPEAT, "[|");
        tokens.add(token);
        elems = new ArrayList<PlayableElement>();
        note = new Note('C', 3, 4);
        elems.add(note);
        chord = new Chord(new Note('c'));
        chord = chord.addNote(new Note('e'));
        elems.add(chord);
        measure = new Measure(elems, true, true, false, false, false);
        ans = new Pair<Measure, Integer>(measure, 7);
        result = parser.measureParser(tokens, 0, null);
        assertEquals(ans.getVal1().toString(), result.getVal1().toString());
        assertEquals(ans.getVal1().isFirstRepeat, result.getVal1().isFirstRepeat);
        assertEquals(ans.getVal1().isMajorEnd, result.getVal1().isMajorEnd);
        assertEquals(ans.getVal1().isMajorStart, result.getVal1().isMajorStart);
        assertEquals(ans.getVal1().isRepeatEnd, result.getVal1().isRepeatEnd);
        assertEquals(ans.getVal1().isSecondRepeat, result.getVal1().isSecondRepeat);
        assertEquals(ans.getVal2(), result.getVal2());
        
        tokens = new ArrayList<ABCLexer.Token>();
        token = new ABCLexer.Token(Type.NOTE, "C");
        tokens.add(token);
        token = new ABCLexer.Token(Type.LENGTH, "3/4");
        tokens.add(token);
        token = new ABCLexer.Token(Type.START_CHORD, "[");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "c");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "e");
        tokens.add(token);
        token = new ABCLexer.Token(Type.END_CHORD, "]");
        tokens.add(token);
        token = new ABCLexer.Token(Type.END_REPEAT, ":|");
        tokens.add(token);
        elems = new ArrayList<PlayableElement>();
        note = new Note('C', 3, 4);
        elems.add(note);
        chord = new Chord(new Note('c'));
        chord = chord.addNote(new Note('e'));
        elems.add(chord);
        measure = new Measure(elems, true, true, true, false, false);
        ans = new Pair<Measure, Integer>(measure, 7);
        result = parser.measureParser(tokens, 0, null);
        assertEquals(ans.getVal1().toString(), result.getVal1().toString());
        assertEquals(ans.getVal1().isFirstRepeat, result.getVal1().isFirstRepeat);
        assertEquals(ans.getVal1().isMajorEnd, result.getVal1().isMajorEnd);
        assertEquals(ans.getVal1().isMajorStart, result.getVal1().isMajorStart);
        assertEquals(ans.getVal1().isRepeatEnd, result.getVal1().isRepeatEnd);
        assertEquals(ans.getVal1().isSecondRepeat, result.getVal1().isSecondRepeat);
        assertEquals(ans.getVal2(), result.getVal2());
    }
    
    @Test
    public void majorStartTest() {
        tokens = new ArrayList<ABCLexer.Token>();
        token = new ABCLexer.Token(Type.NOTE, "C");
        tokens.add(token);
        token = new ABCLexer.Token(Type.LENGTH, "3/4");
        tokens.add(token);
        token = new ABCLexer.Token(Type.START_CHORD, "[");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "c");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "e");
        tokens.add(token);
        token = new ABCLexer.Token(Type.END_CHORD, "]");
        tokens.add(token);
        token = new ABCLexer.Token(Type.BAR, "|");
        tokens.add(token);
        ArrayList<PlayableElement> elems = new ArrayList<PlayableElement>();
        Note note = new Note('C', 3, 4);
        elems.add(note);
        Measure previous = new Measure(elems, false, true, false, false, false);
        Chord chord = new Chord(new Note('c'));
        chord = chord.addNote(new Note('e'));
        elems.add(chord);
        Measure measure = new Measure(elems, true, false, false, false, false);
        Pair<Measure, Integer> ans = new Pair<Measure, Integer>(measure, 7);
        Pair<Measure, Integer> result = parser.measureParser(tokens, 0, previous);
        assertEquals(ans.getVal1().toString(), result.getVal1().toString());
        assertEquals(ans.getVal1().isFirstRepeat, result.getVal1().isFirstRepeat);
        assertEquals(ans.getVal1().isMajorEnd, result.getVal1().isMajorEnd);
        assertEquals(ans.getVal1().isMajorStart, result.getVal1().isMajorStart);
        assertEquals(ans.getVal1().isRepeatEnd, result.getVal1().isRepeatEnd);
        assertEquals(ans.getVal1().isSecondRepeat, result.getVal1().isSecondRepeat);
        assertEquals(ans.getVal2(), result.getVal2());
    }
    
    
    @Test
    public void repeatTest() {
        tokens = new ArrayList<ABCLexer.Token>();
        token = new ABCLexer.Token(Type.ALT_ENDING, "1");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "C");
        tokens.add(token);
        token = new ABCLexer.Token(Type.LENGTH, "3/4");
        tokens.add(token);
        token = new ABCLexer.Token(Type.START_CHORD, "[");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "c");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "e");
        tokens.add(token);
        token = new ABCLexer.Token(Type.END_CHORD, "]");
        tokens.add(token);
        token = new ABCLexer.Token(Type.BAR, "|");
        tokens.add(token);
        ArrayList<PlayableElement> elems = new ArrayList<PlayableElement>();
        Note note = new Note('C', 3, 4);
        elems.add(note);
        Measure previous = new Measure(elems, false, true, false, false, false);
        Chord chord = new Chord(new Note('c'));
        chord = chord.addNote(new Note('e'));
        elems.add(chord);
        Measure measure = new Measure(elems, true, false, false, true, false);
        Pair<Measure, Integer> ans = new Pair<Measure, Integer>(measure, 8);
        Pair<Measure, Integer> result = parser.measureParser(tokens, 0, previous);
        assertEquals(ans.getVal1().toString(), result.getVal1().toString());
        assertEquals(ans.getVal1().isFirstRepeat, result.getVal1().isFirstRepeat);
        assertEquals(ans.getVal1().isMajorEnd, result.getVal1().isMajorEnd);
        assertEquals(ans.getVal1().isMajorStart, result.getVal1().isMajorStart);
        assertEquals(ans.getVal1().isRepeatEnd, result.getVal1().isRepeatEnd);
        assertEquals(ans.getVal1().isSecondRepeat, result.getVal1().isSecondRepeat);
        assertEquals(ans.getVal2(), result.getVal2());
        
        tokens = new ArrayList<ABCLexer.Token>();
        token = new ABCLexer.Token(Type.ALT_ENDING, "2");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "C");
        tokens.add(token);
        token = new ABCLexer.Token(Type.LENGTH, "3/4");
        tokens.add(token);
        token = new ABCLexer.Token(Type.START_CHORD, "[");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "c");
        tokens.add(token);
        token = new ABCLexer.Token(Type.NOTE, "e");
        tokens.add(token);
        token = new ABCLexer.Token(Type.END_CHORD, "]");
        tokens.add(token);
        token = new ABCLexer.Token(Type.BAR, "|");
        tokens.add(token);
        elems = new ArrayList<PlayableElement>();
        note = new Note('C', 3, 4);
        elems.add(note);
        previous = new Measure(elems, false, true, false, false, false);
        chord = new Chord(new Note('c'));
        chord = chord.addNote(new Note('e'));
        elems.add(chord);
        measure = new Measure(elems, true, false, false, false, true);
        ans = new Pair<Measure, Integer>(measure, 8);
        result = parser.measureParser(tokens, 0, previous);
        assertEquals(ans.getVal1().toString(), result.getVal1().toString());
        assertEquals(ans.getVal1().isFirstRepeat, result.getVal1().isFirstRepeat);
        assertEquals(ans.getVal1().isMajorEnd, result.getVal1().isMajorEnd);
        assertEquals(ans.getVal1().isMajorStart, result.getVal1().isMajorStart);
        assertEquals(ans.getVal1().isRepeatEnd, result.getVal1().isRepeatEnd);
        assertEquals(ans.getVal1().isSecondRepeat, result.getVal1().isSecondRepeat);
        assertEquals(ans.getVal2(), result.getVal2());
    }
}
